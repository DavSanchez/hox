{
  description = "My implementations of Lox, a programming language from the book 'Crafting Interpreters' by Robert Nystrom";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    oldDartNixpkgs.url = "github:nixos/nixpkgs/8cad3dbe48029cb9def5cdb2409a6c80d3acfe2e"; # Dart 2.19.6
    flake-parts.url = "github:hercules-ci/flake-parts";
    git-hooks = {
      url = "github:cachix/git-hooks.nix";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    treefmt-nix = {
      url = "github:numtide/treefmt-nix";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    crafting-interpreters = {
      url = "github:munificent/craftinginterpreters";
      flake = false;
    };
  };

  outputs =
    inputs@{ flake-parts, ... }:
    # https://flake.parts/module-arguments.html
    flake-parts.lib.mkFlake { inherit inputs; } (
      # top@{ config, withSystem, moduleWithSystem, ... }: # Unused for now
      _: {
        imports = with inputs; [
          git-hooks.flakeModule
          treefmt-nix.flakeModule
        ];
        systems = [
          "x86_64-linux"
          "aarch64-linux"
          "x86_64-darwin"
          "aarch64-darwin"
          # ...
        ];
        perSystem =
          {
            config,
            pkgs,
            system,
            self',
            ...
          }:
          let
            dart2 = inputs.oldDartNixpkgs.legacyPackages.${system}.dart;
            crafting-interpreters-check =
              {
                testCase ? "",
                ...
              }:
              pkgs.stdenv.mkDerivation {
                pname = "crafting-interpreters-tests";
                version = "0.0.0";
                src = inputs.crafting-interpreters;
                nativeBuildInputs =
                  (with pkgs; [
                    gnumake
                    openjdk
                    cacert
                  ])
                  ++ [ dart2 ];
                configurePhase = ''
                  HOME=$PWD
                  make get
                '';
                # This is a fixed output derivation so it has network access (hence add the hash)
                # It actually produces "nothing" (see installPhase below), we use only for
                # running the Lox tests with our implementation
                outputHash = "sha256-pQpattmS9VmO3ZIQUFn66az8GSmB4IvYhTTCFn6SUmo=";
                outputHashAlgo = "sha256";
                outputHashMode = "recursive";

                # The test run
                doCheck = testCase != "";
                checkPhase = ''
                  dart tool/bin/test.dart ${testCase} --interpreter ${self'.packages.default}/bin/hox
                '';
                # tl,dr; derivations have to produce an output ¯\_(ツ)_/¯
                installPhase = ''
                  mkdir $out
                '';
              };
          in
          {
            checks = {
              chapter04 = crafting-interpreters-check { testCase = "chap04_scanning"; };
            };

            devShells.default = pkgs.mkShell {
              shellHook = ''
                ${config.pre-commit.installationScript}
              '';
              packages = with pkgs.haskellPackages; [
                haskell-language-server
                cabal-install
                doctest
              ];
            };

            packages = {
              default = pkgs.haskellPackages.callPackage ./default.nix { };
              craftinginterpreters = crafting-interpreters-check { };
            };

            # Git hooks
            pre-commit = {
              settings = {
                hooks = {
                  # Formatters
                  treefmt = {
                    enable = true;
                    packageOverrides.treefmt = config.treefmt.build.wrapper;
                  };
                  # Git
                  actionlint.enable = true; # GitHub Actions
                  convco.enable = true; # Conventional commits
                  gitlint.enable = true; # Git commit messages
                  check-merge-conflicts.enable = true; # Check for merge conflicts
                  # Nix
                  flake-checker.enable = true;
                  # Haskell
                  hlint.enable = true; # Haskell linter
                  # Cabal to Nix pacakge definition
                  cabal2nix.enable = true;
                  # Markdown
                  markdownlint.enable = true;
                };
              };
            };

            # Formatters
            treefmt = {
              programs = {
                nixfmt = {
                  enable = true; # Nix
                  excludes = [
                    "default.nix" # Autogenerated by cabal2nix
                  ];
                };
                # Cabal
                cabal-gild.enable = true;
                # Haskell code
                ormolu.enable = true;
              };
            };
          };
      }
    );
}
