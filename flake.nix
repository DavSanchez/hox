{
  description = "My implementations of Lox, a programming language from the book 'Crafting Interpreters' by Robert Nystrom";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    oldDartNixpkgs.url = "github:nixos/nixpkgs/8cad3dbe48029cb9def5cdb2409a6c80d3acfe2e"; # Dart 2.19.6
    flake-parts.url = "github:hercules-ci/flake-parts";
    git-hooks = {
      url = "github:cachix/git-hooks.nix";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    treefmt-nix = {
      url = "github:numtide/treefmt-nix";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs =
    inputs@{ flake-parts, ... }:
    # https://flake.parts/module-arguments.html
    flake-parts.lib.mkFlake { inherit inputs; } (
      # top@{ config, withSystem, moduleWithSystem, ... }: # Unused for now
      _: {
        imports = with inputs; [
          git-hooks.flakeModule
          treefmt-nix.flakeModule
        ];
        systems = [
          "x86_64-linux"
          "aarch64-linux"
          "x86_64-darwin"
          "aarch64-darwin"
          # ...
        ];
        perSystem =
          {
            config,
            pkgs,
            system,
            ...
          }:
          let
            # Dependencies for building and running the Lox tests in Robert Nystrom's repository
            # See <https://github.com/munificent/craftinginterpreters#testing-your-implementation>
            crafting-interpreters-packages = with pkgs; [
              gnumake
              inputs.oldDartNixpkgs.legacyPackages.${system}.dart # Dart 2.19.6
            ];
          in
          {
            devShells = {
              default = pkgs.mkShell {
                shellHook = ''
                  ${config.pre-commit.installationScript}
                  echo "Hello Tree Walk Interpreter!"
                '';
                packages =
                  with pkgs.haskellPackages;
                  [
                    haskell-language-server
                    cabal-install
                    doctest
                  ]
                  ++ crafting-interpreters-packages;
              };
            };

            packages.default = pkgs.haskellPackages.callPackage ./default.nix { };

            # Git hooks
            pre-commit = {
              settings = {
                hooks = {
                  # Formatters
                  treefmt = {
                    enable = true;
                    packageOverrides.treefmt = config.treefmt.build.wrapper;
                  };
                  # Git
                  actionlint.enable = true; # GitHub Actions
                  convco.enable = true; # Conventional commits
                  gitlint.enable = true; # Git commit messages
                  check-merge-conflicts.enable = true; # Check for merge conflicts
                  # Nix
                  flake-checker.enable = true;
                  # Haskell
                  hlint.enable = true; # Haskell linter
                  # Cabal to Nix pacakge definition
                  cabal2nix.enable = true;
                  # Markdown
                  markdownlint.enable = true;
                };
              };
            };

            # Formatters
            treefmt = {
              programs = {
                nixfmt = {
                  enable = true; # Nix
                  excludes = [
                    "default.nix" # Autogenerated by cabal2nix
                  ];
                };
                # Cabal
                # cabal-gild.enable = true; # Not yet available in treefmt-nix
                # Haskell code
                ormolu.enable = true;
              };
            };
          };
      }
    );
}
